                Cazan Bogdan-Marian 333CB

                                            TEMA 2 APD - MAP-REDUCE

        In this homework, we have implemented the Map-Reduce paradigm in order to process a set of documents received
    as input. The reason we did this is to rank every file, based on a ranking method which is based on Fibonacci string
    and also the maximum length of a word and the frequency of it.
        In order to do so, we used Java's executor service and the CompletableFuture class, in order to save the results
    obtained after each of the two operations (map and reduce). So, we have created tasks of type Map, and tasks of type
    Reduce, each task doing its own purpose, which will be described in the following.
        First of all, we have created a method simple called "start", where we create the tasks for Map and for Reduce,
    and also extra little computations, such as opening the files and getting their lengths, sorting the Reduce result
    after the rank and printing the result in our given output files. Now, in parallel, we will have some tasks to
    perform the Map operations, and also tasks to perform the Reduce one.
            MAP
        Map operation does the following:
    -> read a fragment from a file (not the entire file)
    -> doesn't consider the first word if it is not a full word and considers the last word, even if it's not a full
    one, and just a piece
    -> split the fragment read by the delimiters given
    -> the split action is realized using String Tokenizer from Java.
    -> create a hash map which will store the frequency of the words, based on their length
    -> each hash map obtained by a task will be stored in a Completable Future and appended to a list of Completable
    Future of that type (the type is hash map).
            REDUCE
        Reduce operation is shorter than Map and does the following:
    -> after Map, each file has a list of hash maps, the length of this list is equal to the number of fragments that
    the file was "broken"
    -> from this list of hash maps, create a new one, which will represent the hash map for the entire file
    -> after that, compute the rank of the file, based on the formula given in our homework
    -> the result will be of type String and will be stored in a Completable Future

        In the end in Tema2 class, we will sort the list of Strings obtained from Reduce after the rank and then we will
    put the result in a new output file.
